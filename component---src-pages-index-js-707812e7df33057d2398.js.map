{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.math.trunc.js"],"names":["IndexPage","pageName","$export","S","trunc","it","Math","floor","ceil"],"mappings":"uOA8HeA,UA/GG,WAqGhB,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,6CAEF,kBAAC,IAAD,S,qBCxHN,IAAIC,EAAU,EAAQ,QAEtBA,EAAQA,EAAQC,EAAG,OAAQ,CACzBC,MAAO,SAAeC,GACpB,OAAQA,EAAK,EAAIC,KAAKC,MAAQD,KAAKE,MAAMH","file":"component---src-pages-index-js-707812e7df33057d2398.js","sourcesContent":["import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport L from 'leaflet'\r\nimport axios from 'axios';\r\n\r\nimport Layout from 'components/Layout';\r\nimport Mapbox from '../components/Mapbox';\r\n\r\nconst LOCATION = {\r\n  lat: 0,\r\n  lng: 0,\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 2;\r\n\r\nconst IndexPage = () => {\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement: map } = {}) {\r\n    let response;\r\n\r\n    try {\r\n      response = await axios.get('https://corona.lmao.ninja/v2/countries');\r\n    } catch(e) {\r\n      console.log(`Failed to fetch countries: ${e.message}`, e);\r\n      return;\r\n    }\r\n\r\n    const { data = [] } = response;\r\n    const hasData = Array.isArray(data) && data.length > 0;\r\n\r\n    if ( !hasData ) return;\r\n\r\n    const geoJson = {\r\n      type: 'FeatureCollection',\r\n      features: data.map((country = {}) => {\r\n        const { countryInfo = {} } = country;\r\n        const { lat, long: lng } = countryInfo;\r\n        return {\r\n          type: 'Feature',\r\n          properties: {\r\n            ...country,\r\n          },\r\n          geometry: {\r\n            type: 'Point',\r\n            coordinates: [ lng, lat ]\r\n          }\r\n        }\r\n      })\r\n    };\r\n\r\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\r\n      pointToLayer: (feature = {}, latlng) => {\r\n        const { properties = {} } = feature;\r\n        let updatedFormatted;\r\n        let casesString;\r\n\r\n        const {\r\n          country,\r\n          updated,\r\n          cases,\r\n          deaths,\r\n          recovered\r\n        } = properties\r\n\r\n        casesString = `${cases}`;\r\n\r\n        if ( cases > 1000 ) {\r\n          casesString = `${casesString.slice(0, -3)}k+`\r\n        }\r\n\r\n        if ( updated ) {\r\n          updatedFormatted = new Date(updated).toLocaleString();\r\n        }\r\n\r\n        const html = `\r\n      <span class=\"icon-marker\">\r\n        <span class=\"icon-marker-tooltip\">\r\n          <h2>${country}</h2>\r\n          <ul>\r\n            <li><strong>Confirmed:</strong> ${cases}</li>\r\n            <li><strong>Deaths:</strong> ${deaths}</li>\r\n            <li><strong>Recovered:</strong> ${recovered}</li>\r\n            <li><strong>Last Update:</strong> ${updatedFormatted}</li>\r\n          </ul>\r\n        </span>\r\n        ${ casesString }\r\n      </span>\r\n    `;\r\n\r\n        return L.marker( latlng, {\r\n          icon: L.divIcon({\r\n            className: 'icon',\r\n            html\r\n          }),\r\n          riseOnHover: true\r\n        });\r\n      }\r\n    });\r\n\r\n    geoJsonLayers.addTo(map)\r\n  }\r\n\r\n\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'OpenStreetMap',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect,\r\n  };\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>Home Page</title>\r\n      </Helmet>\r\n      <Mapbox/>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n"],"sourceRoot":""}